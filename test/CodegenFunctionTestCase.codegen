@generated
!@#$%codegentest:testAsync
async function genFoo() {
}

!@#$%codegentest:testDocBlockCommentsWrap
/**
 * xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * (Generated from EntTestSchema)
 */
function getName(): string {
  return $name;
}

!@#$%codegentest:testManualSection
function genProprietorName(): string {
  /* BEGIN MANUAL SECTION genProprietorName */
  // insert your code here
  /* END MANUAL SECTION */
}

!@#$%codegentest:testMemoize
<<__Memoize>>
function getExpensive() {
}

!@#$%codegentest:testMixedBuiltInAndUserAttributes
<<__Override, Facebook\HackCodegen\DataProvider('providerFunc'), Facebook\HackCodegen\TestsBypassVisibility>>
function getOverridedBypassVisibilityAndUseDataProvider() {
}

!@#$%codegentest:testMixedBuiltInAndUserAttributesAsync
<<__Override, Facebook\HackCodegen\DataProvider('providerFunc'), Facebook\HackCodegen\TestsBypassVisibility>>
async function genOverridedBypassVisibilityAndUseDataProvider() {
}

!@#$%codegentest:testMixedUserAttributes
<<Facebook\HackCodegen\DataProvider('providerFunc'), Facebook\HackCodegen\TestsBypassVisibility>>
function getBypassVisibilityAndUseDataProvider() {
}

!@#$%codegentest:testOverride
<<__Override>>
function getNotLikeParent() {
}

!@#$%codegentest:testOverrideAndMemoized
<<__Override, __Memoize>>
function getExpensiveNotLikeParent() {
}

!@#$%codegentest:testOverrideMemoizedAsync
<<__Override, __Memoize>>
async function genExpensiveNotLikeParent() {
}

!@#$%codegentest:testParams
function getName(string $name) {
  return $name . $name;
}

!@#$%codegentest:testSimpleGetter
/**
 * Return the name of the user.
 */
function getName(): string {
  return $name;
}

!@#$%codegentest:testSingleUserAttributeWitArgument
<<Facebook\HackCodegen\DataProvider('providerFunc')>>
function getUseDataProvider() {
}

!@#$%codegentest:testSingleUserAttributeWithoutArgument
<<Facebook\HackCodegen\TestsBypassVisibility>>
function getTestsBypassVisibility() {
}

